; Doc - Annex 1 - 4.2.2 - Object Classes - Facts

; !class (_fact (_obj {obj: after:ts before:ts cfd:nb :~}))

; first, some setup:
ball:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
b:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
; The statement that b is a ball.
b_is_a_ball:(mk.val b essence ball 1) |[]

f1:(fact 
b_is_a_ball   ; obj - a reference to an object
0s:0ms:0us    ; after - timestamp
GIGASEC       ; before - timestamp
1             ; cfd - confidence
1) 
[]
   [SYNC_AXIOM now 1 forever stdin nil]


; lets try some invalid params
f2:(fact 
b_is_a_ball   ; obj - a reference to an object
GIGASEC       ; after - timestamp
-1s:1ms:1us ; before - timestamp
-1            ; cfd - confidence
1) 
[]
   [SYNC_AXIOM now 1 forever stdin nil]




; below are some more examples.

; Make b_is_a_ball a fact from now to the maximum time. 
f_b_is_a_ball:(fact b_is_a_ball 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
; Make b_is_a_ball a fact from 300 to 400 ms
f_b_is_a_ball_interval:(fact b_is_a_ball 0s:300ms:0us 0s:400ms:0us 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
; Make b_is_a_ball a fact with low confidence 
f_b_is_a_ball_low_confidence:(fact b_is_a_ball 0s:0ms:0us GIGASEC 0.2 1) [[SYNC_AXIOM now 1 forever stdin nil]]


; anti facts work similarly:
x:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
; x is a ball
x_is_a_ball:(mk.val x essence ball 1) |[]
; Make b_is_a_ball an anti-fact from now to the maximum time. 
af_x_is_a_ball:(|fact b_is_a_ball 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]