; Doc - Annex 2 - 3.2 - rMem's - Notifications

; !class (mk.new (_obj obj:))

;setup grp with notifications on 
g1:(grp 
2      ; upr - update-period
0      ; sln_thr – saliency threshold
0.4    ; act_thr – activation threshold
0      ; vis_thr – visibility threshold
1      ; c_sln – content saliency
0      ; c_sln_thr – content saliency threshold
1      ; c_act – content activation
0      ; c_act_thr – content saliency threshold
0      ; dcy_per – decay percentage
1      ; dcy_tgt – decay target value
0      ; dcy_prd - decay period
0      ; dcy_auto - decay auto
1      ; sln_chg_thr – threshold on saliency changes
1      ; sln_chg_prd – saliency change monitoring period
1      ; act_chg_thr – threshold on activation changes
1      ; act_chg_prd – activation change monitoring period
0      ; avg_sln – average saliency
0      ; high_sln – highest saliency
0      ; low_sln – lowest saliency
0      ; avg_act – average activation
0      ; high_act – highest activation
0      ; low_act – lowest activation
1      ; high_sln_thr – high saliency notification threshold
0      ; low_sln_thr – low saliency notification threshold
1      ; sln_ntf_prd – saliency notification period
1      ; high_act_thr – high activation notification threshold
0      ; low_act_thr – low activation notification threshol
1      ; act_ntf_prd – activation notification period
1      ; ntf_new - determines if new objects in group yield a notification
0      ; low_res_thr – low resilience notification threshol
[stdin stdout root]    ; ntf_grps – notification groups
1      ; psln_thr - from _obj development
)
[]
	[[SYNC_ONCE now 0 forever root nil COV_OFF 0]]
g2:(std_grp 0 0 0 0 [nil]) [[SYNC_ONCE now 0 forever stdin nil COV_OFF 0]]


; setup duplicates for later
dupe:(ent 1) [[SYNC_ONCE now 0 forever root nil]]

; inject an object
pgm0:(pgm 
|[]
|[]
|[]
[]
   (inj []
      e1:(ent 1)    ; object to inject
      [SYNC_ONCE now 0 1 g1 nil]  ; accompanying view for the object
   )
1) |[]

; inject two objects at once
pgm1:(pgm 
|[]
|[]
|[]
[]
   (inj []
      e2:(ent 1)  
      [SYNC_ONCE now 0 1 g1 nil] 
   )
   (inj []
      e3:(ent 1)
      [SYNC_ONCE now 0 1 g1 nil] 
   )
1) |[]

; inject objects at later times, bounded by vw.ijt
pgm2:(pgm 
|[]
|[]
|[]
[]
   (inj []
      e4:(ent 1)
      [SYNC_ONCE (+ now 100000) 0 1 g1 nil]
   )
   (inj []
      e5:(ent 1)
      [SYNC_ONCE (+ now 1us) 0 1 g1 nil]
   )
   (inj []
      e6:(ent 1)
      [SYNC_ONCE (+ now 200ms) 0 1 g1 nil]
   )
   (inj []
      e7:(ent 1)
      [SYNC_ONCE (+ now 13s) 0 1 g1 nil]
   )
1) |[]

; inject in different groups
pgm3:(pgm 
|[]
|[]
|[]
[]
   (inj []
      e8:(ent 1)
      [SYNC_ONCE now 0 1 g1 nil]
   )
   (inj []
      e9:(ent 1)
      [SYNC_ONCE now 0 1 g2 nil]
   )
1) |[]

; try inj obj in group where it is not already present - should add this view to existing object "dupe".
pgm4:(pgm 
|[]
|[]
|[]
[]
   (inj []
      dupe
      [SYNC_ONCE now 0 1 g1 nil] 
   )
1) |[]
; now, a true duplicate. should update view values to the highest among the 2 -> update vw.ijt!
pgm5:(pgm 
|[]
|[]
|[]
[]
   (inj []
      dupe
      [SYNC_ONCE now 0 1 g1 nil] 
   )
1) |[]


ipgm0:(ipgm pgm0 |[] RUN_ONCE  0ms VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 1 stdin nil 1]]
ipgm1:(ipgm pgm1 |[] RUN_ONCE 100ms VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 1 g1 nil 1]]
ipgm2:(ipgm pgm2 |[] RUN_ONCE 200ms VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 1 g1 nil 1]]
ipgm3:(ipgm pgm3 |[] RUN_ONCE 300ms VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 1 stdin nil 1]]
ipgm4:(ipgm pgm4 |[] RUN_ONCE 400ms VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 1 g1 nil 1]]
ipgm5:(ipgm pgm5 |[] RUN_ONCE 500ms VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 1 g1 nil 1]]