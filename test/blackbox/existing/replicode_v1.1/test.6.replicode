;demonstrates the use of red as productions
;demonstrates the use of type resolution ("cast")

mk.val1:(mk.val
self
position
(vec3 0 0 0)
0
)
[]
   [SYNC_FRONT now 0.2 forever root nil]

mk.tag1:(mk.tag
self
"tag on self"
1
)
[]
   [SYNC_FRONT now 0.1 forever root nil]

P1:(pgm
[]; tpl
   (ptn tgv:(tagged_v vec: :) |[])
[]; input
   []
      (|ptn in:(ent ::) []
         (> in.vw.res 2)
         (= in.psln_thr 1)
      )
      (ptn pos:(ent psln:) [(= psln 1)])
   |[]
   []
      v#view:(fvw in root)
      (= v.res pos.vw.res)
(red in.mks []
   (ptn m: [mkv#view:(fvw m root) (> mkv.sln 0)])
   []
      (inj [m [SYNC_FRONT now mkv.sln forever stdout nil]])
      (mod [mkv.sln -0.7])
|[]
)
0; psln_thr
)
|[]

iP1:(ipgm
P1; code
[]; args
   (tagged_v (vec3 1 2 3) "vector 123")
RUN_ALWAYS; run
4000000us; tsc
NOTIFY; nfr
0; psln_thr
)
[]
   [SYNC_FRONT now 0 forever root nil 1]
