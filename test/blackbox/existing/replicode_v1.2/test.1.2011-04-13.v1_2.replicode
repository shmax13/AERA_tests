; Source code: Eric Nivel / CADIA-RU
; Additional comments: Helgi Páll Helgason / CADIA-RU
the_right_hand:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
a_cup:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
; same_pos[X Y P T]:[(X position P)T, (Y position P)T]
; There are two entities: A (some_hand_1) and B (some_object_1)
some_hand_1:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
some_object_1:(ent 1) [[SYNC_ONCE now 1 forever root nil]]

; A marker indicating that the position of A is (0,0,0)
some_hand_1_pos:(mk.val some_hand_1 position (vec3 0 0 0) 1) |[]

; A fact indicating that the state described in the marker holds true NOW. Let us call this fact F1.
fact_some_hand_1_pos:(fact some_hand_1_pos 0s:0ms:0us 0s:0ms:0us 1 1) |[]

; A marker indicating that the position of B is (0,0,0)
some_object_1_pos:(mk.val some_object_1 position (vec3 0 0 0) 1) |[]

; A fact indicating that the state described in the marker above holds true NOW. Let us call this fact F2.
fact_some_object_1_pos:(fact some_object_1_pos 0s:0ms:0us 0s:0ms:0us 1 1) |[]

; A definition of a composite state that holds true when F1 and F2 are true. That fact that the position values for
; A and B are identical is detected and will be useful later for abstraction.
same_pos_cst:(cst |[] [fact_some_hand_1_pos fact_some_object_1_pos] |[] |[] [stdin] 1) [[SYNC_ONCE now 0 forever primary nil 1]]

;----------------------------------------------------------------------

; grab[H X T1 T0]:[(grab H T1)T0 -> (H attachment X)T1]
 
; There are two entities, A (some_hand) and B (some_object)
some_hand:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
some_object:(ent 1) [[SYNC_ONCE now 1 forever root nil]]

; A grab command is created. It specifies A as the target entity (doing the grabbing) and 10ms as the 
; deadline for execution.
cmd_grab:(cmd grab_hand [some_hand] 1) |[]

; This fact indicates that existence of this command is true NOW. Let us call this fact F1.
fact_cmd_grab:(fact cmd_grab 0s:0ms:0us 0s:0ms:0us 1 1) |[]

; A marker that indicates that A and B have an attachment relation.
attached:(mk.val some_hand attachment some_object 1) |[]

; This fact indicates that attachment marker above is true 100000 microseconds in the FUTURE. 
; Let us call this fact F2.
fact_attached:(fact attached 0s:100ms:0us 0s:100ms:0us 1 1) |[]

; Defines a model from F1 and F2. 
; This can be viewed as: 
; "F1 causes F2" (forward model) 
; or 
; "To achieve F2, F1 is necessary" (inverse model)
grab_mdl:(mdl |[] [fact_cmd_grab fact_attached] |[] |[] [stdin] 1 1 1 0 1) [[SYNC_ONCE now 0 forever primary nil 1]]

;----------------------------------------------------------------------

; req_grab_mdl[X Y T T0 T1]:[(icst same_pos X Y T0)T -> (imdl grab_mdl X T1)T]

; There are two entities: A (some_hand_2) and B (some_object_2)
some_hand_2:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
some_object_2:(ent 1) [[SYNC_ONCE now 1 forever root nil]]

; Instansiates the composite state "same_pos_cst" with A and B being the target objects at the same place
; with (0,0,0) as the position.
i_same_pos_cst:(icst same_pos_cst |[] [some_hand_2 some_object_2 (vec3 0 0 0) 0us] false 1) |[]

; This fact indicates that the instansiated composite state is true NOW. Let us call this fact F1.
f_i_same_pos_cst:(fact i_same_pos_cst 0s:0ms:0us 0s:0ms:0us 1 1) |[]

; Instansiates the model "grab_mdl" with A and B as parameters and 100000 microseconds as the deadline.
i_grab_mdl:(imdl grab_mdl |[] [some_hand_2 some_object_2 100ms 0us] false 1) |[]

; This fact indicates that model just created exists NOW. Let us call it F2.
f_i_grab_mdl:(fact i_grab_mdl 0s:0ms:0us 0s:0ms:0us 1 1) |[]

; Define a new model with facts F1 and F2. This can be viewed as: "F1 causes F2" or "To achieve F2, F1 is necessary".
; More clearly: If I have an instansiated compositate state that indicates two objects share the same position, 
; the existance of an instansiated grab model is predicted. Conversely, if I want an instansiated grab model, 
; I need to have such a composite state.
req_grab_mdl:(mdl |[] [f_i_same_pos_cst f_i_grab_mdl] |[] |[] [stdin] 1 1 1 0 1) [[SYNC_ONCE now 0 forever primary nil 1]]

;----------------------------------------------------------------------

; This program runs once and sets the initial conditions. It injects the positions for the two objects. 
; Facts are injected as well to indicate when the position relation is true.
test_fwd_same_pos:(pgm |[] |[] |[] []
   (inj []
      v0:(mk.val the_right_hand position (vec3 0 0 0) 1)
      [SYNC_ONCE now 0 forever stdin nil]
   )
   (inj []
      (fact v0 now now 1 1)
      [SYNC_ONCE now 1 forever stdin nil]
   )
   (inj []
      v1:(mk.val a_cup position (vec3 0 0 0) 1)
      [SYNC_ONCE now 0 forever stdin nil]
   )
   (inj []
      (fact v1 now now 1 1)
      [SYNC_ONCE now 1 forever stdin nil]
   )
1) |[]

; This program has ACTIVATION=1 and will thus run.
i_test_fwd_same_pos:(ipgm test_fwd_same_pos |[] RUN_ONCE 150ms VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 forever primary nil 1]]

;----------------------------------------------------------------------

; This program runs once and injects a goal. This is done by:
;   1. create an attachment relation between the objects
;   2. make a fact that indicates this relation should hold true 30000 microseconds in the future
;   3. make a goal marker that references (2) - the state tha is described in 2 is in fact the goal
;   4. make a fact that indicates this goal exists and is valid NOW
inj_goal:(pgm |[] |[] |[] []
   (inj []
      v0:(mk.val the_right_hand attachment a_cup 1)
      [SYNC_ONCE now 0 forever stdin nil]
   )
   (inj []
      v1:(fact v0 (+ now 30ms) (+ now 30ms) 1 1)
      [SYNC_ONCE now 0 forever stdin nil]
   )
   (inj []
      v2:(goal v1 self nil 1)
      [SYNC_ONCE now 0 forever stdin nil]
   )
   (inj []
      (fact v2 now now 1 1)
      [SYNC_ONCE now 1 forever stdin nil]
   )
1) |[]

; This program has ACTIVATION=1 and will thus run.
i_inj_goal:(ipgm inj_goal |[] RUN_ONCE 150ms VOLATILE SILENT 1) [[SYNC_ONCE now 0 forever stdin nil 1]]

;----------------------------------------------------------------------

; This program looks for a grab command and any two objects sharing the same position. 
; When these conditions are met, it:
;   1. Injects a fact referencing the existence of the command
;   2. Injects a maker indicating an attachment relation between the objects
;   3. Injects a fact indicating the the attachment marker holds true NOW
; Essentially, this program creates the results of the grab command.

environment_resp:(pgm |[] []
   (ptn (fact (goal (fact c:(cmd grab_hand [the_right_hand] ::) ::) ::) ::) |[])
   (ptn (fact (mk.val the_right_hand position pos1: ::) ::) |[])
   (ptn (fact (mk.val something: position pos2: ::) ::) |[])
[]
   (<> something the_right_hand)
   (= pos1 pos2)
[]
   (inj []
      (fact c now now 1 1)
      [SYNC_ONCE now 1 forever stdin nil]
   )
   (inj []
      a:(mk.val the_right_hand attachment something 1)
      [SYNC_ONCE now 0 forever stdin nil]
   )
   (inj []
      (fact a now now 1 1)
      [SYNC_ONCE now 1 forever stdin nil]
   )
1) |[]

; This program has ACTIVATION=1 and thus run.
i_environment_resp:(ipgm environment_resp |[] RUN_ALWAYS 0us VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 forever stdin nil 1]]

;----------------------------------------------------------------------

; This program injects the grab command and a fact indicating that it has 30ms as its deadline.
; Only present for testing - we do not need this if have the inj_goal program running.

inj_cmd:(pgm |[] |[] |[] []
   (inj []
      v0:(cmd grab_hand [the_right_hand] 1)
      [SYNC_ONCE now 0 forever stdin nil]
   )
   (inj []
      v1:(fact v0 (+ now 30ms) (+ now 30ms) 1 1)
      [SYNC_ONCE now 1 forever stdin nil]
   )
1) |[]

; Note that this instansiated program has ACTIVATION=0 and thus does nothing
i_inj_cmd:(ipgm inj_cmd |[] RUN_ONCE 150ms VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 forever stdin nil 0]]
